apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: "com.gradle.plugin-publish"

group 'org.arquillian.spacelift.gradle'
version '1.0.0-alpha-16-SNAPSHOT'

allprojects {
    tasks.withType(JavaCompile) { 
        sourceCompatibility = "1.6"
        targetCompatibility = "1.6" 
    }
    tasks.withType(GroovyCompile) { 
        sourceCompatibility = "1.6"
        targetCompatibility = "1.6" 
    }
}

repositories {
    mavenCentral()
    // adding staging repository, might be handy for lastest Arquillian Spacelift version
    maven {
        name 'jboss-staging-repository-group'
        url 'https://repository.jboss.org/nexus/content/groups/staging'
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        // publishing to maven repository
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        // publishing to Gradle repository
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.0'
  }
}

dependencies {
    compile gradleApi()
    compile 'org.codehaus.groovy:groovy-all:2.3.9'

    // commons lang is used to do platform checks
    compile 'org.apache.commons:commons-lang3:3.1'

    // Spacelift abstracts execution of external commands
    compile 'org.arquillian.spacelift:arquillian-spacelift:1.0.0.Alpha7'
    compile 'org.jboss.aerogear.test:spacelift-jboss-manager:0.9.0'

    // FIXME manually include ShrinkWrap Resolver Depchain as pom typed import does not play well with Gradle and Eclipse
    compile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-api:2.1.1'
    compile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-spi:2.1.1'
    compile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-api-maven:2.1.1'
    compile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-spi-maven:2.1.1'
    compile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven:2.1.1'
    compile('org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven-archive:2.1.1') {
        // FIXME Sisu Plexus depends on Guava 10 while Gradle API requires Guava 11
        exclude group: "com.google.guava", module: "guava"
    }
    
    testCompile 'junit:junit:4.11'
}

test {
    testLogging {
        exceptionFormat "full"
    }
}

configurations {
    // exclude pom typed import of ShrinkWrap Resolver Depchain
    compile.exclude(module: "shrinkwrap-resolver-depchain")
}

// publish plugin to Gradle repository
pluginBundle {
  website = 'http://www.arquillian.org/'
  vcsUrl = 'https://github.com/arquillian/arquillian-spacelift-gradle'
  description = 'Gradle Plugin for Arquillian Spacelift'
  tags = ['test', 'automation', 'orchestration', 'process', 'arquillian', 'native']

  plugins {
    spaceliftPlugin {
      id = 'org.arquillian.spacelift'
      displayName = 'Gradle Plugin for Arquillian Spacelift'
    }
  }
}   


// publish plugin to Maven Repository
publishing {
    publications {
        mavenJava(MavenPublication) {

            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            pom.withXml {
                def Node root = asNode();

                root.appendNode('name', 'Gradle Plugin for Arquillian Spacelift')
                root.appendNode('description', 'Gradle Plugin to provide test environment')
                root.appendNode('url', 'https://github.com/arquillian/arquillian-spacelift-gradle')

                def org = root.appendNode( 'organization' )
                org.appendNode( 'name', 'Arquillian.org' )
                org.appendNode( 'url', 'https://arquillian.org' )

                def issues = root.appendNode( 'issueManagement' )
                issues.appendNode( 'system', 'JIRA' )
                issues.appendNode( 'url', 'https://issues.jboss.org/browse/ARQ' )

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', 'https://github.com/arquillian/arquillian-spacelift-gradle' )
                scm.appendNode( 'connection', 'scm:git:https://github.com/arquillian/arquillian-spacelift-gradle.git' )
                scm.appendNode( 'developerConnection', 'scm:git:git@github.com:arquillian/arquillian-spacelift-gradle.git' )

                def license = root.appendNode( 'licenses' ).appendNode( 'license' )
                license.appendNode( 'name', 'Apache License, Version 2.0' )
                license.appendNode( 'url', 'http://www.apache.org/licenses/LICENSE-2.0.txt' )
                license.appendNode( 'distribution', 'repo' )

                def devs = root.appendNode( 'developers' )
                def kpiwko = devs.appendNode( 'developer' )
                kpiwko.appendNode( 'name', 'Karel Piwko' )
                kpiwko.appendNode( 'email', 'kpiwko@redhat.com' )
                def smikloso = devs.appendNode( 'developer' )
                smikloso.appendNode( 'name', 'Stefan Miklosovic' )
                smikloso.appendNode( 'email', 'smikloso@redhat.com' )
                def tkriz = devs.appendNode( 'developer' )
                tkriz.appendNode( 'name', 'Tadeas Kriz' )
                tkriz.appendNode( 'email', 'tkriz@redhat.com' )

                // TEMPORARY : currently Gradle Publishing feature is exporting dependencies as 'runtime' scope,
                // rather than 'compile'; fix that.
                asNode().dependencies[0].dependency.each {
                    it.scope[0].value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            if ( project.version.endsWith( "SNAPSHOT" ) ) {
                name 'jboss-snapshots-repository'
                url 'https://repository.jboss.org/nexus/content/repositories/snapshots/'
            }
            else {
                name 'jboss-releases-repository'
                url 'https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/'
            }
        }
    }
}

// construct package with sources
task sourcesJar(type: Jar, dependsOn: compileGroovy) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
